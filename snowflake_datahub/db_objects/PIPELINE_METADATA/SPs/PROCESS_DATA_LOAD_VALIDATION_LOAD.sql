CREATE OR REPLACE PROCEDURE DATAHUB.PIPELINE_METADATA.PROCESS_DATA_LOAD_VALIDATION_LOAD("DATE_PARAM" DATE DEFAULT null)
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS 'DECLARE
    Target_Date DATE;
    Missing_File VARCHAR(16777216);
    SQL_QUERY VARCHAR(16777216);
    RESULT1 VARCHAR;
    V_TABLE VARCHAR(16777216);
BEGIN
    -- Determine the target date
    Target_Date := COALESCE(DATE_PARAM, CURRENT_DATE() - INTERVAL ''1 DAY'');

    -- Create temporary table for frequency
    CREATE OR REPLACE TEMPORARY TABLE Frequency(day_status VARCHAR(50));

    -- Step 1: Check for scheduled processes
    INSERT INTO Frequency
    SELECT day_status 
    FROM (
        SELECT ''BD_DAILY'' AS day_status
        FROM DATAHUB.PIPELINE_METADATA.DATE_CALENDAR
        WHERE DATE_VALUE = :Target_Date AND BUSINESS_DAY_FLG = ''Y''
        
        UNION 
        
        SELECT ''CD_DAILY'' AS day_status
        FROM DATAHUB.PIPELINE_METADATA.DATE_CALENDAR
        WHERE DATE_VALUE = :Target_Date
        
        UNION 
        
        SELECT ''WEEKLY_'' || UPPER(SUBSTR(DAY_NAME, 0, 3)) AS day_status
        FROM DATAHUB.PIPELINE_METADATA.DATE_CALENDAR
        WHERE DATE_VALUE = :Target_Date AND WEEKEND_FLG = ''Y''
        
        UNION 
        
        SELECT DISTINCT FREQUENCY_TEXT AS day_status
        FROM DATAHUB.PIPELINE_METADATA.DATA_FEED_FILE_INVENTORY
        WHERE FREQUENCY_TEXT LIKE ''%MONTHLY%''
        AND FREQUENCY_TEXT LIKE ''%_'' || DAY(TO_DATE(:Target_Date)) || ''_%''
    );

    -- If no scheduled processes, set a default message
    IF ((SELECT COUNT(1) FROM Frequency) = 0) THEN
        RETURN ''No scheduled processes'';
    END IF;

    -- Step 2: Insert data into PROCESS_DATA_LOAD_VALIDATION
    INSERT INTO PROCESS_DATA_LOAD_VALIDATION
    SELECT
        DATAHUB.PIPELINE_METADATA.PROCESS_DATA_LOAD_SEQ.NEXTVAL AS PROCESS_DATA_LOAD_ID,
        PM.PROCESS_VALIDATION_ID,
        PT.PROCESS_VALIDATION_TABLE_ID,
        DI.SOURCE_SYS_CODE,  
        PL.PIPELINEKEY,
        PL.ELT_PROCESS_ID,
        PL.FIRM_CODE as FIRMID,
        PL.ROWS_INGESTED_COUNT AS RECORD_COUNT,
        PL.BUSINESS_DATE AS RUN_DATE,
        CASE 
            WHEN PL.SOURCE_FILE_ROW_COUNT = PL.ROWS_INGESTED_COUNT THEN ''Y''
            WHEN PL.ROWS_FAILED_COUNT IS NOT NULL THEN ''N''
        END AS LOAD_FLG,
        PL.ELT_EXECUTION_TS AS TRANSACTION_TS, 
        CASE    
            WHEN PL.ROWS_FAILED_COUNT !=0 THEN PL.ROWS_FAILED_COUNT || '' are not processed from source file'' 
            WHEN PL.ROWS_INGESTED_COUNT / PL2.ROWS_INGESTED_COUNT * 100 < 70 THEN ''Huge data surge is there''
            ELSE ''NO Error''		
        END AS ERROR_MESSAGE,
        CURRENT_USER() AS ELT_CREATED_BY,
        CURRENT_TIMESTAMP() AS ELT_CREATED_TS  
    FROM 
        DATAHUB.PIPELINE_METADATA.PROCESS_VALIDATION_MASTER PM 
    INNER JOIN 
        DATAHUB.PIPELINE_METADATA.PROCESS_VALIDATION_TABLE_LIST PT 
        ON PM.PROCESS_VALIDATION_ID = PT.PROCESS_VALIDATION_ID 
        AND PM.SCHEDULE_FREQUENCY_TEXT in (SELECT day_status FROM Frequency)
        AND PT.Active_flg = ''Y'' 
    INNER JOIN 
        DATAHUB.PIPELINE_METADATA.DATA_FEED_FILE_INVENTORY DI 
        ON DI.TARGET_TABLE_NAME = PT.VALIDATE_TABLE_NAME 
        AND DI.TARGET_SCHEMA_NAME = PT.VALIDATE_SCHEMA_NAME
        AND DI.TARGET_DATABASE_NAME = PT.VALIDATE_DATABASE_NAME
    LEFT JOIN 
        DATAHUB.PIPELINE_METADATA.PIPELINE_RUN_AUDIT_LOG PL 
        ON PL.TARGET_TABLE_NAME = PT.VALIDATE_TABLE_NAME
        AND PL.TARGET_SCHEMA_NAME = PT.VALIDATE_SCHEMA_NAME
        AND PL.TARGET_DATABASE_NAME = PT.VALIDATE_DATABASE_NAME 		
        AND PL.BUSINESS_DATE = :Target_Date
    INNER JOIN 
        DATAHUB.PIPELINE_METADATA.PIPELINE_RUN_AUDIT_LOG PL2 
        ON PL2.TARGET_TABLE_NAME = PL.TARGET_TABLE_NAME 
     QUALIFY ROW_NUMBER() OVER (PARTITION BY PL.TARGET_TABLE_NAME ORDER BY PL.BUSINESS_DATE DESC) = 2;

    -- Step 3: Check if any files are missing to process
    RESULT1 := 
    (SELECT CASE WHEN 
    (SELECT Count(1)
from DATAHUB.PIPELINE_METADATA.DATA_FEED_FILE_INVENTORY DI
Inner Join DATAHUB.PIPELINE_METADATA.PROCESS_VALIDATION_TABLE_LIST PT
ON  PT.VALIDATE_TABLE_NAME= DI.TARGET_TABLE_NAME
AND PT.VALIDATE_SCHEMA_NAME= DI.TARGET_SCHEMA_NAME
AND PT.VALIDATE_DATABASE_NAME= DI.TARGET_DATABASE_NAME
left join DATAHUB.PIPELINE_METADATA.PROCESS_DATA_LOAD_VALIDATION PV
On PV.PROCESS_VALIDATION_TABLE_ID=PT.PROCESS_VALIDATION_TABLE_ID
Where DI.FREQUENCY_TEXT in (SELECT day_status FROM Frequency)
AND DI.ACTIVE_FLG=''Y''
AND PV.ERROR_MESSAGE is NULL) > 0 THEN ''EXIST''
    ELSE ''DOES NOT EXIST'' END AS RESULT); 

    IF (:RESULT1 = ''EXIST'') THEN
          
       CALL CONVERT2HTML(''SELECT TO_VARCHAR(DI.FILE_NAME) AS "FILE_NAME", 
       TO_VARCHAR(DI.FIRM_NAME) AS "FIRM_NAME", 
       TO_VARCHAR(DI.PIPELINEKEY) AS "PIPELINEKEY", 
       TO_VARCHAR(DI.MOUNT_FILE_PATH_TEXT) AS "MOUNT_FILE_PATH_TEXT", 
       CASE    
            WHEN PV.ERROR_MESSAGE IS NULL THEN ''''This file is not  processed today''''
            ELSE PV.ERROR_MESSAGE		
        END AS "ERROR_MESSAGE"
FROM DATAHUB.PIPELINE_METADATA.DATA_FEED_FILE_INVENTORY AS DI
INNER JOIN DATAHUB.PIPELINE_METADATA.PROCESS_VALIDATION_TABLE_LIST AS PT
ON PT.VALIDATE_TABLE_NAME = DI.TARGET_TABLE_NAME
AND PT.VALIDATE_SCHEMA_NAME = DI.TARGET_SCHEMA_NAME
AND PT.VALIDATE_DATABASE_NAME = DI.TARGET_DATABASE_NAME
LEFT OUTER JOIN DATAHUB.PIPELINE_METADATA.PROCESS_DATA_LOAD_VALIDATION AS PV
ON PV.PROCESS_VALIDATION_TABLE_ID = PT.PROCESS_VALIDATION_TABLE_ID
AND PV.ERROR_MESSAGE !=''''NO Error''''
WHERE DI.FREQUENCY_TEXT in (SELECT day_status FROM Frequency)
AND DI.ACTIVE_FLG = ''''Y'''''') INTO V_TABLE;

        CALL SYSTEM$SEND_EMAIL(
            ''DATAHUB_EMAIL_NOTIFICATION1'', 
            ''ANKITHA.BASAVARAJAPPA@OSAIC.COM'',
            ''ACTION: Files are missing to process'',
            :V_TABLE,
            ''TEXT/HTML''
        );
    ELSE

        CALL SYSTEM$SEND_EMAIL(
            ''DATAHUB_EMAIL_NOTIFICATION1'', 
            ''ANKITHA.BASAVARAJAPPA@OSAIC.COM'',
            ''NO ACTION: All files processed successfully.'',
            ''TEXT/HTML''
        );
    END IF;

    RETURN ''Procedure executed successfully.'';
END';