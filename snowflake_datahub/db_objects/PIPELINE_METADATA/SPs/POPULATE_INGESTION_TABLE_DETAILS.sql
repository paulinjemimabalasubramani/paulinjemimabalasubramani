CREATE OR REPLACE PROCEDURE DATAHUB.PIPELINE_METADATA.POPULATE_INGESTION_TABLE_DETAILS("FILE_ID" VARCHAR, "FILE_TYPE" VARCHAR)
RETURNS VARCHAR
LANGUAGE SQL
EXECUTE AS OWNER
AS 'DECLARE 
ENTRY_COUNT INT;
BRNZ_TABLE_NAME STRING;
ERROR_MESSAGE STRING;
BRNZ_TABLE_NAME_CHECK EXCEPTION ;
BEGIN
IF (:FILE_TYPE = ''SQL'') THEN

	CREATE OR REPLACE TEMPORARY TABLE TEMP_TABLE_COLUMNS AS SELECT
			DF.STG_DATABASE_NAME,
			DF.STG_SCHEMA_NAME ,
			DF.STG_TABLE_NAME ,
			DF.TARGET_SCHEMA_NAME ,
			DF.TARGET_TABLE_NAME ,
			DF.FILE_ID,
			CASE
				WHEN SM.COLUMN_NAME RLIKE ''^[0-9].*'' THEN
					UPPER(''_'' || SPLIT(REGEXP_REPLACE(SM.COLUMN_NAME, ''([0-9]+)([A-Z][a-z]+)'',''\\\\1 \\\\2''),'' '')[0] 
							|| ''_'' || REGEXP_REPLACE(SPLIT(REGEXP_REPLACE(SM.COLUMN_NAME, ''([0-9]+)([A-Z][a-z]+)'',''\\\\1 \\\\2''),'' '')[1], ''([a-z])([A-Z])'', ''\\\\1_\\\\2''))
    				ELSE
    					UPPER(REGEXP_REPLACE(SM.COLUMN_NAME, ''([a-z])([A-Z])'', ''\\\\1_\\\\2''))
    			END AS COLUMN_NAME,
			SF.SNOWFLAKE_COLUMN_DATATYPE,
            CASE WHEN UPPER(SM.IS_NULLABLE)=''YES'' THEN ''Y'' ELSE ''N'' END AS IS_NULLABLE,			
			SM.ORDINAL_POSITION,
            SM.NUMERIC_PRECISION,
            SM.NUMERIC_SCALE
			FROM SQL_SOURCE_MAPPING_DETAILS SM,DATA_FEED_FILE_INVENTORY DF ,SQL_TO_SNOWFLAKE_DATATYPE_MAPPING SF
	WHERE 
	DF.FILE_ID = :FILE_ID 
	AND DF.ACTIVE_FLG=''Y''
	AND DF.STG_TABLE_NAME = ''STG_'' || UPPER(TABLE_CATALOG || ''_'' || TABLE_SCHEMA || ''_'' || TABLE_NAME)
	AND SF.SQL_SERVER_DATATYPE = SM.SQL_DATATYPE 
	ORDER BY CAST(SM.ORDINAL_POSITION as INT) ASC;
	
END IF;
	
BRNZ_TABLE_NAME := (SELECT TARGET_TABLE_NAME FROM TEMP_TABLE_COLUMNS LIMIT 1);
	
ENTRY_COUNT := (SELECT COUNT(1) FROM DATAHUB.INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = :BRNZ_TABLE_NAME);

IF (:ENTRY_COUNT = 1) THEN
	ERROR_MESSAGE := ''ERROR : Already '' || :BRNZ_TABLE_NAME || '' is exist. Please alter the table if you want to add any new columns.'' ;

RAISE BRNZ_TABLE_NAME_CHECK;
END IF;


DELETE FROM INGESTION_TABLE_SCHEMA WHERE FILE_ID = :FILE_ID;
	
INSERT INTO INGESTION_TABLE_SCHEMA 
	(TABLE_SCHEMA_ID,
	 DATABASE_NAME,
	 STAGE_TABLE_SCHEMA,
	 STAGE_TABLE_NAME,
	 BRONZE_SCHEMA_NAME,
	 BRONZE_TABLE_NAME,
	 FILE_ID,
	 COLUMN_NAME,
	 COLUMN_DATATYPE_TEXT,
	 COLUMN_COMMENT,
	 NULLABLE_FLG,
	 COLUMN_SEQUENCE_NUMBER,
     NUMERIC_PRECISION,
     NUMERIC_SCALE,
     COLUMN_START_POSITION_NUMBER,
	 COLUMN_END_POSITION_NUMBER,
	 CASTING_LOGIC_TEXT,
	 CASTING_DATE_FORMAT_TEXT,
	 CREATED_BY_NAME,
	 CREATED_TS)
	 SELECT 
        TABLE_SCHEMA_ID_SEQ.NEXTVAL,   
        T.STG_DATABASE_NAME,
        T.STG_SCHEMA_NAME ,
        T.STG_TABLE_NAME ,
        T.TARGET_SCHEMA_NAME ,
        T.TARGET_TABLE_NAME ,
        T.FILE_ID,
        REPLACE(T.COLUMN_NAME,''#'',''_''),
        T.SNOWFLAKE_COLUMN_DATATYPE,
        NULL,
        T.IS_NULLABLE,
        T.ORDINAL_POSITION,
        NULLIF(T.NUMERIC_PRECISION,''NULL'')::NUMBER ,
        NULLIF(T.NUMERIC_SCALE,''NULL'')::NUMBER ,
        NULL,
        NULL,
        NULL,
        NULL,
        CURRENT_USER,
        CURRENT_TIMESTAMP   
	FROM TEMP_TABLE_COLUMNS T;
  
    RETURN ''SUCCESS'';
    
    EXCEPTION WHEN BRNZ_TABLE_NAME_CHECK THEN
    RETURN ERROR_MESSAGE ;
--RAISE;
END';