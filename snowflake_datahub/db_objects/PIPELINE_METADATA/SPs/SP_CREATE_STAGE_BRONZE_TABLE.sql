CREATE OR REPLACE PROCEDURE DATAHUB.PIPELINE_METADATA.SP_CREATE_STAGE_BRONZE_TABLE("FILE_ID" NUMBER(38,0), "FILE_TYPE" VARCHAR)
RETURNS VARCHAR
LANGUAGE SQL
EXECUTE AS OWNER
AS 'DECLARE 
DDL_STATEMENT STRING;
COLUMNS_DEFINITIONS ARRAY;
COLUMNS_DEFINITIONS_WITH_ELT_TYPE STRING;
ELT_DATATYPE STRING := '' VARCHAR'';
ENTRY_COUNT INT;
BRNZ_COLUMNS ARRAY;
NEW_BRNZ_COLUMNS ARRAY := ARRAY_CONSTRUCT();
ELT_COLUMN_LIST_STG STRING;
ELT_COLUMN_LIST_BRZ STRING;
STG_DATABASE STRING;
STG_SCHEMA STRING;
STG_TABLE STRING;
BRNZ_DATABASE STRING;
BRNZ_SCHEMA STRING;
BRNZ_TABLE STRING;
ALTER_BRNZ_TABLE STRING;
DUPLICATE_COLUMNS ARRAY := ARRAY_CONSTRUCT();
DUPLICATE_COLUMN_SEQ ARRAY := ARRAY_CONSTRUCT();
ERROR_MESSAGE STRING;
DUPLICATE_COLUMNS_CHECK EXCEPTION ;
DUPLICATE_COLUMN_SEQ_CHECK EXCEPTION ;

BEGIN 

SELECT 
    STG_DATABASE_NAME,
    STG_SCHEMA_NAME,
    STG_TABLE_NAME,
    TARGET_DATABASE_NAME,
    TARGET_SCHEMA_NAME,
    TARGET_TABLE_NAME
INTO
    STG_DATABASE,
    STG_SCHEMA,
    STG_TABLE,
    BRNZ_DATABASE,
    BRNZ_SCHEMA,
    BRNZ_TABLE
FROM
    DATA_FEED_FILE_INVENTORY
WHERE
    FILE_ID = :FILE_ID
    AND ACTIVE_FLG = ''Y'';

SELECT ARRAY_AGG(COLUMN_NAME) INTO COLUMNS_DEFINITIONS FROM INGESTION_TABLE_SCHEMA WHERE FILE_ID=:FILE_ID ORDER BY COLUMN_SEQUENCE_NUMBER;

IF(:FILE_TYPE = ''SQL'')THEN

    SELECT ARRAY_AGG(COLUMN_NAME) INTO DUPLICATE_COLUMNS FROM INGESTION_TABLE_SCHEMA WHERE FILE_ID=:FILE_ID GROUP BY COLUMN_NAME HAVING COUNT(1) > 1;

    IF (ARRAY_SIZE(:DUPLICATE_COLUMNS) > 0 ) THEN
		ERROR_MESSAGE := ''ERROR : DUPLICATE COLUMNS ['' || ARRAY_TO_STRING(:DUPLICATE_COLUMNS, '','') || ''] IN INGESTION_TABLE_SCHEMA FOR FILE_ID '' || :FILE_ID;
        RAISE DUPLICATE_COLUMNS_CHECK;
	END IF;


    SELECT ARRAY_AGG(COLUMN_SEQUENCE_NUMBER) INTO DUPLICATE_COLUMN_SEQ FROM INGESTION_TABLE_SCHEMA WHERE FILE_ID=:FILE_ID GROUP BY COLUMN_SEQUENCE_NUMBER HAVING COUNT(1) > 1;
	
	IF (ARRAY_SIZE(:DUPLICATE_COLUMN_SEQ) > 0 ) THEN
		ERROR_MESSAGE := ''ERROR : DUPLICATE COLUMN SEQUENCE ['' || ARRAY_TO_STRING(:DUPLICATE_COLUMN_SEQ, '','') || ''] IN INGESTION_TABLE_SCHEMA FOR FILE_ID '' || :FILE_ID;
        RAISE DUPLICATE_COLUMN_SEQ_CHECK  ;
	END IF;
END IF;


--ELT_COLUMN_LIST_STG := ARRAY_TO_STRING(GET_ELT_COLUMNS(''STAGING''), :ELT_DATATYPE || '', '' ) || :ELT_DATATYPE;
--ELT_COLUMN_LIST_BRZ := ARRAY_TO_STRING(GET_ELT_COLUMNS(''BRONZE''), :ELT_DATATYPE || '', '' ) || :ELT_DATATYPE;

ELT_COLUMN_LIST_STG := ARRAY_TO_STRING(GET_ELT_COLUMNS(''STAGING'',''Y''),'', '' );
ELT_COLUMN_LIST_BRZ := ARRAY_TO_STRING(GET_ELT_COLUMNS(''BRONZE'',''Y''), '', '' );

COLUMNS_DEFINITIONS_WITH_ELT_TYPE := ARRAY_TO_STRING(:COLUMNS_DEFINITIONS, :ELT_DATATYPE || '', '' ) || :ELT_DATATYPE;

-- Check if stage table is exist or not

ENTRY_COUNT := (SELECT COUNT(1) FROM DATAHUB.INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = :STG_TABLE);

IF (:ENTRY_COUNT = 1) THEN
    DDL_STATEMENT := ''DROP TABLE '' || :STG_DATABASE || ''.'' || :STG_SCHEMA || ''.'' ||  :STG_TABLE;
    EXECUTE IMMEDIATE DDL_STATEMENT;
END IF;

DDL_STATEMENT := ''CREATE OR REPLACE TABLE '' || :STG_SCHEMA || ''.'' || :STG_TABLE ||  '' ('' || COLUMNS_DEFINITIONS_WITH_ELT_TYPE || '', '' || :ELT_COLUMN_LIST_STG || '' );'';

EXECUTE IMMEDIATE DDL_STATEMENT;

-- Check if bronze table is exist or not

ENTRY_COUNT := (SELECT COUNT(1) FROM DATAHUB.INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = :BRNZ_TABLE);

IF (:ENTRY_COUNT = 1) THEN    
    BRNZ_COLUMNS := (SELECT ARRAY_AGG(COLUMN_NAME) FROM DATAHUB.INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = :BRNZ_TABLE);
    NEW_BRNZ_COLUMNS := ARRAY_EXCEPT(:COLUMNS_DEFINITIONS , :BRNZ_COLUMNS);
    IF (ARRAY_SIZE(:NEW_BRNZ_COLUMNS) > 0) THEN
        ALTER_BRNZ_TABLE := '' ALTER TABLE '' || :BRNZ_SCHEMA || ''.'' || :BRNZ_TABLE;
        FOR K IN 0 TO ARRAY_SIZE(NEW_BRNZ_COLUMNS) - 1 DO
           ALTER_BRNZ_TABLE := ALTER_BRNZ_TABLE || '' ADD COLUMN '' || :NEW_BRNZ_COLUMNS[K] || '' '' || :ELT_DATATYPE || '', '';
        END FOR;
        ALTER_BRNZ_TABLE := LEFT(TRIM(ALTER_BRNZ_TABLE), LENGTH(TRIM(ALTER_BRNZ_TABLE)) - 1) || '';'';
        EXECUTE IMMEDIATE ALTER_BRNZ_TABLE;        
    END IF;
ELSE
    DDL_STATEMENT := ''CREATE OR REPLACE TABLE '' || :BRNZ_SCHEMA || ''.'' || :BRNZ_TABLE
    ||  '' ('' || COLUMNS_DEFINITIONS_WITH_ELT_TYPE || '', '' || :ELT_COLUMN_LIST_BRZ || '' );'';
    EXECUTE IMMEDIATE DDL_STATEMENT;
END IF;



RETURN ''SUCCESSFULLY CREATED '' || :STG_TABLE || '' AND '' || :BRNZ_TABLE || '' TABLES.'';

EXCEPTION WHEN DUPLICATE_COLUMNS_CHECK THEN
RETURN ERROR_MESSAGE ;
WHEN DUPLICATE_COLUMN_SEQ_CHECK THEN 
RETURN ERROR_MESSAGE ;
--RAISE;  

END';